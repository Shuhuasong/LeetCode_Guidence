
1- The most common variants of linked lists are:
    Singly Linked List
    Doubly Linked List
    Circular Linked List

2- Time and Space Complexity
    Best cases: Accessing / Search : O(1) Inserting at head: O(1) Deleting at head: O(1)
    Worst cases: Accessing / Searching : O(N) Inserting: O(N) Deleting: O(N)
    Best Case occurs when the node is at the head of the list and Worst Case is when the node is at the end of the list.

3- Reverse a list-Tips:
   1) store the next node
   2) store the current node's previous node

    public ListNode reverseList(ListNode head) {
           if(head==null || head.next==null) return head;
           ListNode prev = null;
           ListNode cur = head, temp = head;
           while(cur != null){
               temp = cur.next; //store
               cur.next = prev; //revert pointer
               prev = cur;      // move forward
               cur =  temp;
           }
           return prev;
       }

4- Common Operation
     Insert
          insert(head, val):
              node = new ListNode(val)
              head.next = node
              return node;

     Delete
          delete(head, val):
               dummy = new ListNode("dummy")
               dummy.next = head;
               prev = dummy;
               cur =  head;
               while(cur != null){
                  if(cur.val == val){
                      prev.next = cur.next;
                      return dummy.next;
                  }
                  prev = cur;
                  cur = cur.next;
               }

      Length of List
            lenght(head)
               cur = head;
               len = 0;
               while(cur != null){
                   len += 1;
                   cur = cur.next;
               }


5- Check if there is a Cycle in the list:
   Tips: if there is a cycle, the slow and fast pointer will encounter eventually
   public boolean hasCycle(ListNode head) {
           if(head==null) return false;
           ListNode slow = head, fast = head.next;
           while(fast==null || fast.next==null){
               slow = slow.next;
               fast = fast.next.next;
               if(slow==fast) return true;
           }
           return false;
       }

6- Recursion VS Iteration
   Recursion:
   public int getLength(head){
      if(head==null) return 0;
      return getLength(head.next) + 1;
   }

   Iteration:
   public int getLenth(head){
     int len = 0;
     while(head!=null){
         len += 1;
         head = head.next;
     }
     return len;
   }



7- LinkedList Common Technique
   Easily build a linked list
   Understand most common variants
      cons:
         We also don't like to store large amounts of information in linked lists because for every value you store you pay an extra storage penalty of Node object that decorates the item you want to store.
   Feel comfortable with recursion
   Two pointer technique
   Dummy head technique
   Comfort with pointer bookkeeping
   Framework for approaching Linked List problems

