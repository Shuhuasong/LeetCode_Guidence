Sliding Window : Optimize a O(n^2) solution to O(n)

what kind of question use Sliding Window ?
1. continuous elements, e.g String, subarray, LinkedList
2. min, max, longest, shortest, key word

Template:

public int lengthOfLongestSubstringKDistinct(String s, int k){
   Map<Character, Integer> map = new HashMap<>();
   int left = 0, res = 0;
   for(int i=0; i<s.length(); i++){
     char curr = s.charAt(s);
     map.put(curr, map.getOrDefault(curr, 0)+1);//1. Add: add the curr char into window
     while(map.size() > k){ //2. Remove: remove the char from when the window not valid
        char c = s.charAt(left);
        map.put(c, map.get(c)-1);
        if(map.get(c)==0) map.remove(c);
        left++; // move pointer forward
     }
     res = Math.max(res, i-left+1); //update the result when the window is valid
   }
   return res;
}