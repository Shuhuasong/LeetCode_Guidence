 Graph Representation:
 1) adjacency list: the best graph representation when #Edges < #nodes
    vertex     ajacency List
      A -------> {B, C, D}
      B -------> {C}
      C -------> {A, B}
      D -------> {E, B}
 2) adjacency matrix: the best graph representation when #Edges > #nodes
 3) linked representation: not commonly used in interview questions.

            /'B<------E
           / |
 D <---- A   |
         '\  |
           \;C

1. create a graph

    // Create a new list of lists.
    List<List<Integer>> adjacencyList = new ArrayList<>();
    // Initialise an empty list for each node.
    for (int i = 0; i < n; i++) {
        adjacencyList.add(new ArrayList<>());
    }
    // Go through the edge list, populating the adjacency list.
    for (int[] edge : edges) {
        adjacencyList.get(edge[0]).add(edge[1]);
        adjacencyList.get(edge[1]).add(edge[0]);
    }

2.1 BFS a graph
    //count the number of steps from start to target
    int BFS(Node start, Node target)
        Queue<Node> q;
        Set<Node> visited;
        q.offer(start);
        visited.add(start);
        int step = 0;
        while(q not empty) {
            int size = q.size();
            for(int i=0; i<size; i++){
               Node curr = q.poll();
               if(curr is target) return step;
               for(Node neighb : curr.adjacentList){
                  if(neighb not in visited) {
                     q.offer(neighb);
                     visited.add(x);
                  }
               }
            }
            step++;
        }

2.2 DFS a graph

    result = []
    def backtrack（path, option list) :
        if  condition satisfy:
            result.add(path)
            return
        for choice in optionsList;
            make choice
            backtrack (path, option list)
            cancel choice
    ------------------------------------------------------

    // Use a stack to keep track of unexplored nodes.
    Stack<Integer> stack = new Stack<>();
    stack.push(0);
    // Use a set to keep track of already seen nodes to
    // avoid infinite looping.
    Set<Integer> seen = new HashSet<>();
    seen.add(0);

    // While there are nodes remaining on the stack...
    while (!stack.isEmpty()) {
        int node = stack.pop(); // Take one off to visit.
        // Check for unseen neighbours of this node:
        for (int neighbour : adjacencyList.get(node)) {
            if (seen.contains(neighbour)) {
                continue; // Already seen this node.
            }
            // Otherwise, put this neighbour onto stack
            // and record that it has been seen.
            stack.push(neighbour);
            seen.add(neighbour);
        }
    }

3. Strategies of detecting an underected graph contains cycles
   (1) The first strategy is to simply delete the opposite direction edges from the adjacency list.
       In other words, when we follow an edge A → B, we should lookup Bs adjacency list and delete A
       from it, effectively removing the opposite edge of B → A.

       // While there are nodes remaining on the stack...
       while (!stack.isEmpty()) {
           int node = stack.pop(); // Take one off to visit.
           // Check for unseen neighbours of this node:
           for (int neighbour : adjacencyList.get(node)) {
               // Check if we've already seen this node.
               if (seen.contains(neighbour)) {
                   return false;
               }
               // Otherwise, put this neighbour onto stack
               // and record that it has been seen.
               stack.push(neighbour);
               seen.add(neighbour);
               // Remove the link that goes in the opposite direction.
               adjacencyList.get(neighbour).remove(node);
           }
       }

   (2) instead of using a seen set, to use a seen map that also keeps track of the "parent" node
       that we got to a node from. We'll call this map parent.

     // Use a map to keep track of how we got into each node.
     Map<Integer, Integer> parent = new HashMap<>();
     parent.put(0, -1);

     // While there are nodes remaining on the stack...
     while (!stack.isEmpty()) {
         int node = stack.pop(); // Take one off to visit.
         // Check for unseen neighbours of this node:
         for (int neighbour : adjacencyList.get(node)) {
             // Don't look at the trivial cycle.
             if (parent.get(node) == neighbour) {
                 continue;
             }
             // Check if we've already seen this node.
             if (parent.containsKey(neighbour)) {
                 return false; // There must be a cycle.
             }
             // Otherwise, put this neighbour onto stack
             // and record that it has been seen.
             stack.push(neighbour);
             parent.put(neighbour, node);
         }
     }


  Dijkstra - Shortest Path Algorithm
    the same greedy algorithm, every step pick the path with smallest weight
  (direction, weigh, cycle)]
  1) single source shortest path
     1. BFS/DFS(unweighted graph)
     2. Dijikstra basic version(non-negative edge, weighted graph)
     3. Dijikstra optimize version (non-negative edge) Dijikstra + heap
     4. Bellman-Ford (negative-edge)
     5. Bellman-Ford (negative-edge)
  2) multi-source shortest path
     Floyd-Warshall
  -------------------------------------------------------
  function Dijikstra (Graph, source) :
        create vertex set Q

        for each vertex v in Graph:
            dist[v] = infinity
            prev[v] = undefined
            add v into Q
         dist[source] = 0

         while Q is not empty :
             u <-- vertex in Q with min dist[u]
             remove u from Q

             for each neighbor v of u still in Q :  //edge relaxation = find the smallest path
                 alt <-- dist[u] + length(u, v)
                 if alt < dist[v]:
                    dist[v] <-- alt
                    prev[v] = u
         return dfist[], prev[]




